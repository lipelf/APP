import NavAdmin from '@/components/NavAdmin';
import MenuAdmin from '@/components/MenuAdmin';
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import Axios from 'axios';
import { useRouter } from 'next/router';

export default function DeleteUser() {
  const API_URL = "http://localhost:3001/api/users/";

  const [user, setUser] = useState({
    id: "",
    name: "",
    email: "",
    user: "",
    pwd: "",
    level: "",
    status: ""
  });

  const router = useRouter();
  const { pid } = router.query;

  const [message, setMessage] = useState({ message: "", status: "" });
  const [showConfirmation, setShowConfirmation] = useState(false);

  const optionsLevel = [
    { value: '', text: '-- Selecione um nível de acesso --' },
    { value: 'admin', text: 'Administrador' },
    { value: 'user', text: 'Usuário' },
    { value: 'reader', text: 'Leitor' },
  ];

  const optionsStatus = [
    { value: 'on', text: 'Ativo' },
    { value: 'off', text: 'Inativo' },
  ];

  useEffect(() => {
    if (pid) {
      const getUser = async () => {
        try {
          const response = await Axios.get(`${API_URL}${pid}`);
          setMessage({ message: response.data.message, status: "ok" });
          setUser(response.data);
        } catch (error) {
          console.error('Erro ao buscar o usuário:', error);
          setMessage({ message: "Erro ao buscar o usuário!", status: "error" });
        }
      };

      getUser();
    }
  }, [pid]);

  const handleDeleteUser = async () => {
    try {
      const response = await Axios.delete(`${API_URL}${pid}`);
      setMessage({ message: response.data.message, status: "ok" });
      setShowConfirmation(false); // Fechar o modal após deletar
      router.push('/admin/users');
    } catch (error) {
      console.error('Erro ao deletar o usuário:', error);
      setMessage({ message: "Erro ao deletar o usuário!", status: "error" });
    }
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuAdmin />
        { 
          message.status === "" ? "" : 
          message.status === "ok" ? "" : 
          <div className='alert alert-danger' role='alert'> { message.message } <Link className='alert-link' href='/admin/users'>Voltar</Link></div>
        }
      </div>
  
      <div className="d-flex justify-content-center p-2">
        <div className="container">
          <div className="row border-bottom">
            <h3> Detalhes do Usuário </h3>
            <form>
              <div className="form-group">
                <label className="form-label" htmlFor="author_name">Nome</label>
                <input type="text" id="author_name" name="author_name" className="form-control" value={user.name} readOnly/>
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="author_email">E-mail</label>
                <input type="text" id="author_email" name="author_email" className="form-control" value={user.email} readOnly/>
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="author_user">Usuário</label>
                <input type="text" id="author_user" name="author_user" className="form-control" value={user.user} readOnly/>
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="author_pwd">Senha</label>
                <input type="password" id="author_pwd" name="author_pwd" className="form-control" value={user.pwd} readOnly/>
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="author_level">Nível</label>
                <select className="form-select" id="author_level" name="author_level" value={user.level} readOnly>
                  {optionsLevel.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.text}
                    </option>
                  ))}
                </select>
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="author_status">Status</label>
                <select className="form-select" id="author_status" name="author_status" value={user.status} readOnly>
                  {optionsStatus.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.text}
                    </option>
                  ))}
                </select>
              </div>
              <div className="form-group p-2">
                <button
                  type="button"
                  className="btn btn-outline-danger"
                  onClick={() => setShowConfirmation(true)}
                >
                  Deletar
                </button>
                <Link className="btn btn-outline-info" href="/admin/users">Voltar</Link>
              </div>
            </form>
          </div>
        </div>
      </div>  

      {showConfirmation && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h4>Confirmar Exclusão</h4>
            <p>Tem certeza de que deseja excluir o usuário?</p>
            <button
              className="btn btn-danger"
              onClick={handleDeleteUser}
            >
              Confirmar
            </button>
            <button
              className="btn btn-secondary"
              onClick={() => setShowConfirmation(false)}
            >
              Cancelar
            </button>
          </div>
        </div>
      )}

      <style jsx>{`
        .modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
        }
        .modal-content {
          background: #fff;
          padding: 20px;
          border-radius: 5px;
          max-width: 400px;
          text-align: center;
        }
      `}</style>
    </>
  );
}
