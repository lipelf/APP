import Axios from 'axios';
import NavAdmin from '@/components/NavAdmin';
import MenuAdmin from '@/components/MenuAdmin';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';

export default function UpdateAppointment() {
  const API_URL = "http://localhost:3001/api/appointments/";

  const [appointment, setAppointment] = useState({
    specialty: "",
    comments: "",
    student: "",
    professional: ""
  });

  const router = useRouter();
  const { pid } = router.query;

  const [message, setMessage] = useState({ message: "", status: "" });

  useEffect(() => {
    if (pid) {
      const getAppointment = async () => {
        try {
          const response = await Axios.get(`${API_URL}${pid}`);
          setAppointment(response.data);
        } catch (error) {
          setMessage({ message: "Erro ao buscar o agendamento!", status: "error" });
        }
      };

      getAppointment();
    }
  }, [pid]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setAppointment({
      ...appointment,
      [name]: value
    });
  };

  const handleUpdateAppointment = async () => {
    if (!pid) {
      setMessage({ message: "ID do agendamento não encontrado!", status: "error" });
      return;
    }

    const updatedAppointment = {
      specialty: appointment.specialty,
      comments: appointment.comments,
      student: appointment.student,
      professional: appointment.professional
    };

    try {
      const response = await Axios.put(`${API_URL}${pid}`, updatedAppointment);
      setMessage({ message: "Agendamento atualizado com sucesso!", status: "ok" });
      setTimeout(() => {
        router.push('/admin/appointments');
      }, 1500);
    } catch (error) {
      setMessage({ message: "Erro ao atualizar o agendamento!", status: "error" });
    }
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuAdmin />
        { message.status && (
          <div className={`alert ${message.status === 'ok' ? 'alert-success' : 'alert-danger'}`} role='alert'>
            { message.message }
            <Link className='alert-link' href='/admin/appointments'>Voltar</Link>
          </div>
        )}
      </div>

      <div className="d-flex justify-content-center p-2">
        <div className="container">
          <div className="row border-bottom">
            <h3>Edição de Appointment</h3>
            <form>
              <div className="form-group">
                <label className="form-label" htmlFor="specialty">Especialidade</label>
                <input 
                  type="text" 
                  id="specialty" 
                  name="specialty" 
                  className="form-control" 
                  value={appointment.specialty} 
                  onChange={handleChange} 
                />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="comments">Comentários</label>
                <textarea 
                  id="comments" 
                  name="comments" 
                  className="form-control" 
                  value={appointment.comments} 
                  onChange={handleChange} 
                />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="student">Estudante</label>
                <input 
                  type="text" 
                  id="student" 
                  name="student" 
                  className="form-control" 
                  value={appointment.student} 
                  onChange={handleChange} 
                />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="professional">Profissional</label>
                <input 
                  type="text" 
                  id="professional" 
                  name="professional" 
                  className="form-control" 
                  value={appointment.professional} 
                  onChange={handleChange} 
                />
              </div>
              <div className="form-group p-2">
                <button className="btn btn-outline-success" type="button" onClick={handleUpdateAppointment}>Salvar</button>
                <Link className="btn btn-outline-info" href="/admin/appointments">Voltar</Link>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
}
