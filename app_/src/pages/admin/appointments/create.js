import { getSession } from 'next-auth/react';
import NavAdmin from '@/components/NavAdmin';
import MenuAdmin from '@/components/MenuAdmin';
import Head from 'next/head';
import Link from 'next/link';
import { useState } from 'react';
import Axios from 'axios';

export default function CreateAppointments() {
  const API_URL = "http://localhost:3001/api/appointments";

  const [appointment, setAppointment] = useState({
    specialty: "",
    comments: "",
    student: "",
    professional: "",
  });

  const [message, setMessage] = useState({ message: "", status: "" });

  const handleChange = (event) => {
    const { name, value } = event.target;
    setAppointment({
      ...appointment,
      [name]: value
    });
  };

  const handleCreateAppointments = async () => {
    const appointmentWithDate = {
      ...appointment,
      date: new Date().toISOString() // Define a data atual no formato ISO 8601
    };

    try {
      const response = await Axios.post(API_URL, appointmentWithDate);
      setMessage({ message: response.data.message, status: "ok" });
    } catch (error) {
      console.error('Erro ao criar Appointment:', error);
      setMessage({ message: "Erro ao criar Appointment!", status: "error" });
    }
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuAdmin />
        { 
          message.status === "" ? "" : 
          message.status === "ok" ? <div className='alert alert-success' role='alert'> { message.message } <Link className='alert-link' href='/admin/appointments'>Voltar</Link></div> : 
          <div className='alert alert-danger' role='alert'> { message.message } <Link className='alert-link' href='/admin/appointments'>Voltar</Link></div>
        }
      </div>

      <div className="d-flex justify-content-center p-2">
        <div className="container">
          <div className="row border-bottom">
            <h3> Cadastro de Agendamento </h3>
            <form method="POST">
              <div className="form-group">
                <label className="form-label" htmlFor="comments">Comments</label>
                <input type="text" id="comments" name="comments" className="form-control" value={appointment.comments} onChange={handleChange} />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="specialty">Specialty</label>
                <input type="text" id="specialty" name="specialty" className="form-control" value={appointment.specialty} onChange={handleChange} />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="student">Student</label>
                <input type="text" id="student" name="student" className="form-control" value={appointment.student} onChange={handleChange} />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="professional">Professional</label>
                <input type="text" id="professional" name="professional" className="form-control" value={appointment.professional} onChange={handleChange} />
              </div>
              <div className="form-group p-2">
                <button className="btn btn-outline-success" type="button" onClick={handleCreateAppointments}>Salvar</button>
                <Link className="btn btn-outline-info" href="/admin/appointments">Voltar</Link>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  )
}

// Adicionando a verificação de sessão no getServerSideProps
export async function getServerSideProps(context) {
  const session = await getSession({ req: context.req });

  // Verifica se o usuário está logado, caso contrário, redireciona
  if (!session) {
    return {
      redirect: {
        destination: '/login',  // Redireciona para a página de login
        permanent: false,
      },
    };
  }

  // Retorna os dados da página, caso o usuário esteja logado
  return {
    props: { session }, // Passa a sessão como prop
  };
}