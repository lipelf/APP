import { getSession } from 'next-auth/react';
import Axios from 'axios'
import NavAdmin from '@/components/NavAdmin'
import StudentAction from '@/components/StudentAction'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import Link from 'next/link'
import MenuAdmin from '@/components/MenuAdmin'

export default function Students() {
  const API_URL = "http://localhost:3001/api/students";

  const [student, setStudent] = useState([]);
  const [filteredstudents, setFilteredStudents] = useState([]);
  const [search, setSearch] = useState("");

  useEffect(() => {
    const getAllstudents = async () => {
      try {
        const response = await Axios.get(API_URL);
        setStudent(response.data);
        setFilteredStudents(response.data);
      } catch (error) {
        console.error("Erro ao buscar os compromissos:", error);
      }
    };

    getAllstudents();
  }, []);

  const handleSearch = (e) => {
    const term = e.target.value.toLowerCase();
    setSearch(term);
    const filtered = student.filter((student) => student.name.toLowerCase().includes(term));
    setFilteredStudents(filtered);
  };

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm("Tem certeza de que deseja deletar este compromisso?");
    if (confirmDelete) {
      try {
        await Axios.delete(`${API_URL}/${id}`);
        alert("Compromisso deletado com sucesso!");
        // Remove o usuário deletado da lista exibida
        setStudent(student.filter((student) => student._id !== id));
        setFilteredStudents(filteredstudents.filter((student) => student._id !== id));
      } catch (error) {
        console.error("Erro ao deletar o compromisso:", error);
        alert("Erro ao deletar o compromisso. Tente novamente.");
      }
    }
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div>
        <NavAdmin />
        <MenuAdmin />
      </div>

      <div className="d-flex justify-content-center p-2">
        <div className="container">
          <div className="row border-bottom">
            <h3>Lista de estudantes</h3>

            {/* Campo de busca e botão de criar compromisso */}
            <div className="d-flex justify-content-between align-items-center mb-3">
              <input
                type="text"
                placeholder="Buscar por Nome..."
                className="form-control w-50"
                value={search}
                onChange={handleSearch}
              />
              <Link href="/admin/students/create" className="btn btn-primary ms-2">
                Criar Estudante
              </Link>
            </div>

            {/* Tabela de Usuários */}
            <table className="table table-hover table-dark">
              <thead>
                <tr>
                  <th scope="col">#</th>
                  <th scope="col">Nome</th>
                  <th scope="col">Idade</th>
                  <th scope="col">Pais e/ou responsáveis</th>
                  <th scope="col">Telefone</th>
                  <th scope="col">Ações</th>
                </tr>
              </thead>
              <tbody>
                {filteredstudents.map((student) => (
                  <tr key={student._id}>
                    <th scope="row">{student._id}</th>
                    <td className="text-truncate">{student.name}</td>
                    <td className="text-truncate">{student.age}</td>
                    <td className="text-truncate">{student.parents}</td>
                    <td className="text-truncate">{student.phone}</td>
                    <td>
                      <a
                        className="btn btn-outline-success btn-sm me-2"
                        href={`/admin/students/read/${student._id}`}
                      >
                        Visualizar
                      </a>
                      <a
                        className="btn btn-outline-primary btn-sm me-2"
                        href={`/admin/students/update/${student._id}`}
                      >
                        Editar
                      </a>
                      <button
                        className="btn btn-outline-danger btn-sm"
                        onClick={() => handleDelete(student._id)}
                      >
                        Deletar
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            {filteredstudents.length === 0 && (
              <p className="text-center text-light">Nenhum compromisso encontrado.</p>
            )}
          </div>
        </div>
        </div> 
  </>
  )
}

// Adicionando a verificação de sessão no getServerSideProps
export async function getServerSideProps(context) {
  const session = await getSession({ req: context.req });

  // Verifica se o usuário está logado, caso contrário, redireciona
  if (!session) {
    return {
      redirect: {
        destination: '/login',  // Redireciona para a página de login
        permanent: false,
      },
    };
  }

  // Retorna os dados da página, caso o usuário esteja logado
  return {
    props: { session }, // Passa a sessão como prop
  };
}


