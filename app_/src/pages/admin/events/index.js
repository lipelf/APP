import { getSession } from 'next-auth/react';
import Axios from 'axios';
import NavAdmin from '@/components/NavAdmin';
import EventsAction from '@/components/EventsAction'; 
import Head from 'next/head';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import MenuAdmin from '@/components/MenuAdmin'; 


export default function Events() { 
  const API_URL = "http://localhost:3001/api/events"; 
  const [event, setEvents] = useState([]); 
  const [filteredEvents, setFilteredEvents] = useState([]);
  const [search, setSearch] = useState("");

  useEffect(() => {
    const getAllEvents = async () => {
      try {
        const response = await Axios.get(API_URL);
        setEvents(response.data);
        setFilteredEvents(response.data);
      } catch (error) {
        console.error("Erro ao buscar os eventos:", error);
      }
    };

    getAllEvents();
  }, []);

  const handleSearch = (e) => {
    const term = e.target.value.toLowerCase();
    setSearch(term);
    const filtered = event.filter((event) => event.description.toLowerCase().includes(term));
    setFilteredEvents(filtered);
  };

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm("Tem certeza de que deseja deletar este evento?");
    if (confirmDelete) {
      try {
        await Axios.delete(`${API_URL}/${id}`);
        alert("evento deletado com sucesso!");
        setEvents(event.filter((event) => event._id !== id));
        setFilteredEvents(filteredEvents.filter((event) => event._id !== id));
      } catch (error) {
        console.error("Erro ao deletar o evento:", error);
        alert("Erro ao deletar o evento. Tente novamente.");
      }
    }
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div>
        <NavAdmin />
        <MenuAdmin />
      </div>

      <div className="d-flex justify-content-center p-2">
        <div className="container">
          <div className="row border-bottom">
            <h3>Lista de Eventos</h3>


            <div className="d-flex justify-content-between align-items-center mb-3">
              <input
                type="text"
                placeholder="Buscar por Descrição..."
                className="form-control w-50"
                value={search}
                onChange={handleSearch}
              />
              <Link href="/admin/events/create" className="btn btn-primary ms-2">
                Criar Evento
              </Link>
            </div>


            <table className="table table-hover table-dark">
              <thead>
                <tr>
                  <th scope="col">#</th>
                  <th scope="col">Descrição</th>
                  <th scope="col">Data</th>
                  <th scope="col">Ação</th>
                </tr>
              </thead>
              <tbody>
                {filteredEvents.map((event) => (
                  <tr key={event._id}>
                    <th scope="row">{event._id}</th>
                    <td className="text-truncate">{event.description}</td>
                    <td className="text-truncate">{event.date}</td>
                    <td>
                      <a
                        className="btn btn-outline-success btn-sm me-2"
                        href={`/admin/events/read/${event._id}`}
                      >
                        Visualizar
                      </a>
                      <a
                        className="btn btn-outline-primary btn-sm me-2"
                        href={`/admin/events/update/${event._id}`}
                      >
                        Editar
                      </a>
                      <button
                        className="btn btn-outline-danger btn-sm"
                        onClick={() => handleDelete(event._id)}
                      >
                        Deletar
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            {filteredEvents.length === 0 && (
              <p className="text-center text-light">Nenhum evento encontrado.</p>
            )}
          </div>
        </div>
      </div>
    </>
  );
}


export async function getServerSideProps(context) {
  const session = await getSession({ req: context.req });


  if (!session) {
    return {
      redirect: {
        destination: '/login',  
        permanent: false,
      },
    };
  }


  return {
    props: { session }, 
  };
}
