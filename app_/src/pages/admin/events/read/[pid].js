import { getSession } from 'next-auth/react';
import NavAdmin from '@/components/NavAdmin';
import MenuAdmin from '@/components/MenuAdmin';
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import Axios from 'axios';
import { useRouter } from 'next/router';

export default function ReadEvent() { 
  const API_URL = "http://localhost:3001/api/events/"; 

  const [event, setEvent] = useState({
    id: "",
    title: "",
    description: "",
    date: "",
    comments: "",
    status: ""
  });

  const router = useRouter();
  const { pid } = router.query;

  const [message, setMessage] = useState({ message: "", status: "" });

  const optionsStatus = [
    { value: 'scheduled', text: 'Agendado' },
    { value: 'ongoing', text: 'Em andamento' },
    { value: 'completed', text: 'Concluído' },
    { value: 'cancelled', text: 'Cancelado' },
  ];

  useEffect(() => {
    if (pid) {
      console.log('pid:', pid); 
      const getEvent = async () => {
        try {
          const response = await Axios.get(`${API_URL}${pid}`);
          setMessage({ message: response.data.message, status: "ok" });
  
          
          const formattedDate = new Date(response.data.date).toISOString().split('T')[0];
  
          
          setEvent({
            ...response.data,
            date: formattedDate, 
          });
        } catch (error) {
          console.error('Erro ao buscar o evento:', error);
          setMessage({ message: "Erro ao buscar o evento!", status: "error" });
        }
      };
  
      getEvent();
    }
  }, [pid]);
  

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuAdmin /> 
        { 
          message.status === "" ? "" : 
          message.status === "ok" ? "" : 
          <div className='alert alert-danger' role='alert'> { message.message } <Link className='alert-link' href='/admin/events'>Voltar</Link></div>
        }
      </div>
  
      <div className="d-flex justify-content-center p-2">
        <div className="container">
            <div className="row border-bottom">
                <h3> Detalhes do Evento </h3>
            
                <form >
                <div className="form-group">
                    <label className="form-label" htmlFor="title">Título</label>
                    <input type="text" id="title" name="title" className="form-control" value={event.title} readOnly/>
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="description">Descrição</label>
                    <input type="text" id="description" name="description" className="form-control" value={event.description} readOnly/>
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="date">Data</label>
                    <input type="date" id="date" name="date" className="form-control" value={event.date} readOnly/>
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="comments">Comentário</label>
                    <input type="text" id="comments" name="comments" className="form-control" value={event.comments} readOnly/>
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="status">Status</label>
                    <select className="form-select" id="status" name="status" value={event.status} readOnly>
                      {optionsStatus.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.text}
                        </option>
                      ))}
                    </select>
                </div>
                <div className="form-group p-2">
                    <Link className="btn btn-outline-info" href="/admin/events">Voltar</Link>
                </div>
                </form>
            </div>
        </div>
      </div>  
  </>
  );
}


export async function getServerSideProps(context) {
  const session = await getSession({ req: context.req });


  if (!session) {
    return {
      redirect: {
        destination: '/login',  
        permanent: false,
      },
    };
  }


  return {
    props: { session }, 
  };
}
