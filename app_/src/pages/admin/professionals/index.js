import Axios from "axios";
import NavAdmin from "@/components/NavAdmin";
import MenuAdmin from "@/components/MenuAdmin";
import ProfessionalsAction from "@/components/ProfessionalsAction";
import Head from "next/head";
import { useEffect, useState } from "react";
import Link from "next/link";

export default function Professional() {
  const API_URL = "http://localhost:3001/api/professionals";

  const [professional, setProfessional] = useState([]);
  const [filteredProfessional, setFilteredProfessional] = useState([]);
  const [search, setSearch] = useState("");

  useEffect(() => {
    const getAllProfessional = async () => {
      try {
        const response = await Axios.get(API_URL);
        setProfessional(response.data);
        setFilteredProfessional(response.data);
      } catch (error) {
        console.error("Erro ao buscar os compromissos:", error);
      }
    };

    getAllProfessional();
  }, []);

  const handleSearch = (e) => {
    const term = e.target.value.toLowerCase();
    setSearch(term);
    const filtered = professional.filter(
      (professional) =>
        professional?.name?.toLowerCase().includes(term) || professional?.specialty?.toLowerCase().includes(term)// Verifica se `name` existe
    );
    setFilteredProfessional(filtered);
  };
  

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm("Tem certeza de que deseja deletar este compromisso?");
    if (confirmDelete) {
      try {
        await Axios.delete(`${API_URL}/${id}`);
        alert("Compromisso deletado com sucesso!");
        setProfessional(professional.filter((professional) => professional._id !== id));
        setFilteredProfessional(filteredProfessional.filter((professional) => professional._id !== id));
      } catch (error) {
        console.error("Erro ao deletar o compromisso:", error);
        alert("Erro ao deletar o compromisso. Tente novamente.");
      }
    }
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div>
        <NavAdmin />
        <MenuAdmin />
      </div>

      <div className="d-flex justify-content-center p-2">
        <div className="container">
          <div className="row border-bottom">
            <h3>Lista de Profissionais </h3>

            <div className="d-flex justify-content-between align-items-center mb-3">
              <input
                type="text"
                placeholder="Buscar por nome ou especialidade..."
                className="form-control w-50"
                value={search}
                onChange={handleSearch}
              />
              <Link href="/admin/professionals/create" className="btn btn-primary ms-2">
                Criar Profissional
              </Link>
            </div>

            <table className="table table-hover table-dark">
              <thead>
                <tr>
                  <th scope="col">#</th>
                  <th scope="col">Nome</th>
                  <th scope="col">Especialidade</th>
                  <th scope="col">Celular</th>
                  <th scope="col">Ação</th>
                </tr>
              </thead>
              <tbody>
                {filteredProfessional.map((professional) => (
                  <tr key={professional._id}>
                    <th scope="row">{professional._id}</th>
                    <td className="text-truncate">{professional.name}</td>
                    <td className="text-truncate">{professional.specialty}</td>
                    <td className="text-truncate">{professional.phone_number}</td>
                    <td>
                      <a
                        className="btn btn-outline-success btn-sm me-2"
                        href={`/admin/professionals/read/${professional._id}`}
                      >
                        Visualizar
                      </a>
                      <a
                        className="btn btn-outline-primary btn-sm me-2"
                        href={`/admin/professionals/update/${professional._id}`}
                      >
                        Editar
                      </a>
                      <button
                        className="btn btn-outline-danger btn-sm"
                        onClick={() => handleDelete(professional._id)}
                      >
                        Deletar
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            {filteredProfessional.length === 0 && (
              <p className="text-center text-light">Nenhum compromisso encontrado.</p>
            )}
          </div>
        </div>
      </div>
    </>
  );
}