import { getSession } from 'next-auth/react';
import NavAdmin from '@/components/NavAdmin';
import MenuAdmin from '@/components/MenuAdmin';
import Head from 'next/head';
import Link from 'next/link';
import { useState } from 'react';
import Axios from 'axios';

export default function CreateUser() {
  const API_URL = "http://localhost:3001/api/users";

  const [user, setUser] = useState({
    name: "",    // Renomeado para refletir os dados do backend
    email: "",   // Renomeado para refletir os dados do backend
    user: "",    // Renomeado para refletir os dados do backend
    pwd: "",     // Renomeado para refletir os dados do backend
    level: "",   // Renomeado para refletir os dados do backend
    status: "",  // Renomeado para refletir os dados do backend
  });

  const [message, setMessage] = useState({ message: "", status: "" });

  const optionsLevel = [
    { value: '', text: '-- Selecione um nível de acesso --' },
    { value: 'admin', text: 'Administrador' },
    { value: 'user', text: 'Usuário' },
    { value: 'reader', text: 'Leitor' },
  ];

  const optionsStatus = [
    { value: '', text: '-- Selecione um estado --' },
    { value: 'true', text: 'Ativo' },
    { value: 'false', text: 'Inativo' },
  ];

  // Função para lidar com as mudanças nos campos do formulário
  const handleChange = (event) => {
    const { name, value } = event.target;
    setUser({
      ...user,
      [name]: value
    });
  };

  // Função para enviar os dados do formulário e criar um novo usuário
  const handleCreateUser = async () => {
    try {
      const response = await Axios.post(API_URL, user);  // Envia os dados ao backend
      setMessage({ message: response.data.sucesso, status: "ok" });
    } catch (error) {
      console.error('Erro ao criar o Usuário:', error);
      setMessage({ message: "Erro ao criar o Usuário!", status: "error" });
    }
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuAdmin />
        { 
          message.status === "" ? "" : 
          message.status === "ok" ? <div className='alert alert-success' role='alert'> { message.message } <Link className='alert-link' href='/admin'>Voltar</Link></div> : 
          <div className='alert alert-danger' role='alert'> { message.message } <Link className='alert-link' href='/admin'>Voltar</Link></div>
        }
      </div>
  
      <div className="d-flex justify-content-center p-2">
        <div className="container">
            <div className="row border-bottom">
                <h3> Cadastro de Usuário </h3>
            
                <form method="POST">
                <div className="form-group">
                    <label className="form-label" htmlFor="name">Nome</label>
                    <input type="text" id="name" name="name" className="form-control" value={user.name} onChange={handleChange} />
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="email">E-mail</label>
                    <input type="text" id="email" name="email" className="form-control" value={user.email} onChange={handleChange} />
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="user">Usuário</label>
                    <input type="text" id="user" name="user" className="form-control" value={user.user} onChange={handleChange} />
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="pwd">Senha</label>
                    <input type="password" id="pwd" name="pwd" className="form-control" value={user.pwd} onChange={handleChange} />
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="level">Nível</label>
                    <select className="form-select" id="level" name="level" value={user.level} onChange={handleChange}>
                      {optionsLevel.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.text}
                        </option>
                      ))}
                    </select>
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="status">Status</label>
                    <select className="form-select" id="status" name="status" value={user.status} onChange={handleChange}>
                      {optionsStatus.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.text}
                        </option>
                      ))}
                    </select>
                </div>
                <div className="form-group p-2">
                    <button className="btn btn-outline-success" type="button" onClick={handleCreateUser}>Salvar</button>
                    <Link className="btn btn-outline-info" href="/admin">Voltar</Link>
                </div>
                </form>
            </div>
        </div>
      </div>  
    </>
  )
}

// Adicionando a verificação de sessão no getServerSideProps
export async function getServerSideProps(context) {
  const session = await getSession({ req: context.req });

  // Verifica se o usuário está logado, caso contrário, redireciona
  if (!session) {
    return {
      redirect: {
        destination: '/login',  // Redireciona para a página de login
        permanent: false,
      },
    };
  }

  // Retorna os dados da página, caso o usuário esteja logado
  return {
    props: { session }, // Passa a sessão como prop
  };
}
