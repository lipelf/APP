import { getSession } from 'next-auth/react';
import NavAdmin from '@/components/NavAdmin';
import MenuAdmin from '@/components/MenuAdmin';
import Head from 'next/head';
import Link from 'next/link';
import { useState } from 'react';
import Axios from 'axios';

export default function CreateUser() {
  const API_URL = "http://localhost:3001/api/users";
  const [user, setUser] = useState({
    name: "",
    email: "",
    user: "",
    pwd: "",
    level: "",
    status: "",
  });
  const [message, setMessage] = useState({ message: "", status: "" });

  const optionsLevel = [
    { value: '', text: '-- Selecione um nível de acesso --' },
    { value: 'admin', text: 'Administrador' },
    { value: 'user', text: 'Usuário' },
    { value: 'reader', text: 'Leitor' },
  ];

  const optionsStatus = [
    { value: '', text: '-- Selecione um estado --' },
    { value: 'true', text: 'Ativo' },
    { value: 'false', text: 'Inativo' },
  ];

  const handleChange = (event) => {
    const { name, value } = event.target;
    setUser({
      ...user,
      [name]: value
    });
  };

  const checkUsernameExists = async (username) => {
    try {
      const response = await Axios.get(`${API_URL}/check-username/${username}`);
      return response.data.exists;
    } catch (error) {
      console.error("Erro ao verificar nome de usuário:", error);
      return false;
    }
  };

  const handleCreateUser = async () => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!user.name.trim() || !user.email.trim() || !user.user.trim() || !user.pwd.trim() || !user.level || !user.status) {
      setMessage({ message: "Todos os campos são obrigatórios.", status: "error" });
      return;
    }

    if (!emailRegex.test(user.email)) {
      setMessage({ message: "Por favor, insira um e-mail válido.", status: "error" });
      return;
    }

    if (user.pwd.length < 6) {
      setMessage({ message: "A senha deve ter pelo menos 6 caracteres.", status: "error" });
      return;
    }

    const isUsernameTaken = await checkUsernameExists(user.user);
    if (isUsernameTaken) {
      setMessage({ message: "Este nome de usuário já está em uso.", status: "error" });
      return;
    }

    try {
      const response = await Axios.post(API_URL, user);
      setMessage({ message: response.data.sucesso, status: "ok" });
      setTimeout(() => {
        window.location.href = '/admin';
      }, 1000);
    } catch (error) {
      if (error.response) {
        setMessage({ message: error.response.data.error || "Erro ao criar o Usuário!", status: "error" });
      } else {
        setMessage({ message: "Erro na comunicação com o servidor.", status: "error" });
      }
      console.error('Erro ao criar o Usuário:', error);
    }
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuAdmin />
      </div>

      <div className="d-flex justify-content-center p-2">
        <div className="container">
          <div className="row border-bottom">
            {message.status === "" ? "" :
              message.status === "ok" ? <div className='alert alert-success' role='alert'>{message.message} <Link className='alert-link' href='/admin'>Voltar</Link></div> :
                <div className='alert alert-danger' role='alert'>{message.message} <Link className='alert-link' href='/admin'>Voltar</Link></div>
            }
            <h3> Cadastro de Usuário </h3>

            <form method="POST">
              <div className="form-group">
                <label className="form-label" htmlFor="name">Nome</label>
                <input type="text" id="name" name="name" className="form-control" value={user.name} onChange={handleChange} />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="email">E-mail</label>
                <input type="email" id="email" name="email" className="form-control" value={user.email} onChange={handleChange} />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="user">Usuário</label>
                <input type="text" id="user" name="user" className="form-control" value={user.user} onChange={handleChange} />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="pwd">Senha</label>
                <input type="password" id="pwd" name="pwd" className="form-control" value={user.pwd} onChange={handleChange} />
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="level">Nível</label>
                <select className="form-select" id="level" name="level" value={user.level} onChange={handleChange}>
                  {optionsLevel.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.text}
                    </option>
                  ))}
                </select>
              </div>
              <div className="form-group">
                <label className="form-label" htmlFor="status">Status</label>
                <select className="form-select" id="status" name="status" value={user.status} onChange={handleChange}>
                  {optionsStatus.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.text}
                    </option>
                  ))}
                </select>
              </div>
              <div className="form-group p-2">
                <button className="btn btn-outline-success" type="button" onClick={handleCreateUser}>Salvar</button>
                <Link className="btn btn-outline-info" href="/admin">Voltar</Link>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession({ req: context.req });

  if (!session) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }

  return {
    props: { session },
  };
}
